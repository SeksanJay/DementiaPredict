# -*- coding: utf-8 -*-
"""Source Code_Project_Dementia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14MmGitgVYILd0AqAqxSEETz_pbOHBypW

**Data Ingesion**
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')
import numpy as np
import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Project Dementia/dementia_patients_health_data.csv')

df.head(10)

"""**Data Understanding**"""

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(15,len(df.columns)*10))
count = 0
for col in df.drop('Dementia', axis=1).columns:
    count += 1
    plt.subplot(len(df.columns), 1, count)
    sns.histplot(x=col, hue='Dementia', data=df)

""":เราสามารถเห็นความสัมพันธ์ของคอลัมน์ต่างๆกับภาวะสมองเสื่อม ประเด็นที่น่าสังเกตก็คือ
1.ระดับออกซิเจนที่สูงขึ้นทำให้โอกาสเป็นโรคสมองเสื่อมลดลง
2.ประวัติครอบครัวเป็นโรคสมองเสื่อมทำให้โอกาสเป็นโรคสมองเสื่อมลดลง
3.อาการซึมเศร้ามีแนวโน้มที่จะนำไปสู่ภาวะสมองเสื่อม
4.โรคเบาหวานยังมีแนวโน้มที่จะนำไปสู่ภาวะสมองเสื่อม

**Data Preparation**
"""

df.isna().sum()

"""**Data Cleaning**"""

df['Prescription'] = df['Prescription'].fillna('None')
df['Chronic_Health_Conditions'] = df['Chronic_Health_Conditions'].fillna('None')

import matplotlib.pyplot as plt
import seaborn as sns

def mean_median_plot(df,column):
  mean = df[column].mean()
  median = df[column].median()
  plt.figure(figsize = (15,10))
  sns.histplot(df[column], kde=True);
  plt.axvline(mean,color='blue', linestyle='--',label="mean")
  plt.axvline(median,color='red',label="median")
  plt.legend()

mean_median_plot(df,"Dosage in mg")

"""ตรงนี้เราจะเห็นได้ว่าค่ามัธยฐานอยู่ใกล้กับจุดสูงสุดของการแจกแจงมากกว่า ดังนั้นการใส่ค่ามัธยฐานจึงเป็นทางเลือกที่ดีที่สุด

โค้ดนี้จะสร้างกราฟที่ประกอบด้วย subplot ทั้งหมดโดยแต่ละ subplot เป็น histogram ของข้อมูลในแต่ละคอลัมน์ของ DataFrame โดยแบ่งสีตามค่าในคอลัมน์ 'Dementia' ที่มีค่าเป็น '0' หรือ '1' ซึ่งอาจจะช่วยในการวิเคราะห์การกระจายของข้อมูลเพื่อหาความสัมพันธ์ระหว่างคอลัมน์ที่สนใจและคอลัมน์ 'Dementia' ได้
"""

df['Dosage in mg'] = df['Dosage in mg'].fillna(df['Dosage in mg'].median())
df.isna().sum()

df1 = df
from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
categorical_columns = ["Prescription","Education_Level","Dominant_Hand", "Gender", "Family_History", "Smoking_Status",
                       "APOE_ε4", "Medication_History", "Nutrition_Diet", "Sleep_Quality", "Chronic_Health_Conditions", "Physical_Activity", "Depression_Status"]
for i in categorical_columns:
    print(df1[i].unique())

for i in categorical_columns:
    df1[i] = encoder.fit_transform(df[i])

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numerical_columns = ["AlcoholLevel","HeartRate","BloodOxygenLevel","BodyTemperature","Weight","MRI_Delay", "Dosage in mg", "Age", "Cognitive_Test_Scores"]
for col in numerical_columns:
    df1[col] = scaler.fit_transform(np.array(df1[col]).reshape(-1,1))

"""**Model Selection**"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report

x = df1.drop(["Dementia"],axis = 1)
y = df1["Dementia"]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state=42)
log_reg = LogisticRegression()
log_reg.fit(x_train,y_train)
y_pred = log_reg.predict(x_test)
print("Accuracy :",accuracy_score(y_pred, y_test))
print(classification_report(y_pred, y_test))
print("Number of features used in training:", len(x_train.columns))

coefficients = log_reg.coef_
feature_imp = pd.Series(coefficients[0], index=x.columns).sort_values(ascending=True)
feature_imp.plot(kind='barh', title='Important Features')
plt.show()

"""**Prototype ทำนายการเป็นโรคสมองเสื่อม**"""

import warnings
warnings.filterwarnings('ignore')

input_file = pd.read_csv('/content/drive/MyDrive/Project Dementia/dementia_test_data.csv')

input_data = input_file.copy()

for i in categorical_columns:
    input_data[i] = encoder.fit_transform(input_file[i])

for col in numerical_columns:
    input_data[col] = scaler.fit_transform(np.array(input_data[col]).reshape(-1, 1))

# ทำนาย
predictiontest = log_reg.predict(input_data)

# แสดงผลลัพธ์
for index, row in input_data.iterrows():
    predictiontest = log_reg.predict([row])
    if predictiontest[0] == 1:
        print("คนที่", index+1, ": เป็นโรคสมองเสื่อม")
    else:
        print("คนที่", index+1, ": ไม่เป็นโรคสมองเสื่อม")

"""**สร้าง Model โดยใช้ Feature Importance**"""

dftest = pd.read_csv('/content/drive/MyDrive/Project Dementia/train data.csv')

dftest['Prescription'] = dftest['Prescription'].fillna('None')
dftest['Dosage in mg'] = dftest['Dosage in mg'].fillna(dftest['Dosage in mg'].median())
dftest.isna().sum()

dftest1 = dftest
from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
categorical_columns1 = ["Prescription", "APOE_ε4",  "Sleep_Quality", "Depression_Status"]
for i in categorical_columns1:
    print(dftest1[i].unique())

for i in categorical_columns1:
    dftest1[i] = encoder.fit_transform(dftest[i])

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numerical_columns1 = [ "Dosage in mg","Cognitive_Test_Scores"]
for col in numerical_columns1:
    dftest1[col] = scaler.fit_transform(np.array(dftest1[col]).reshape(-1,1))

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report

xtest = dftest1.drop(["Dementia"],axis = 1)
ytest = dftest1["Dementia"]
x_train,x_test,y_train,y_test = train_test_split(xtest,ytest,test_size = 0.2, random_state=42)
log_regtest = LogisticRegression()
log_regtest.fit(x_train,y_train)
y_pred = log_regtest.predict(x_test)
print("Accuracy :",accuracy_score(y_pred, y_test))
print(classification_report(y_pred, y_test))
print("Number of features used in training:", len(x_train.columns))

"""**ใช้งาน Model**"""

import warnings
warnings.filterwarnings('ignore')
inputtest = pd.read_csv('/content/drive/MyDrive/Project Dementia/test data.csv')

input = inputtest .copy()

for i in categorical_columns1:
    input[i] = encoder.fit_transform(inputtest[i])

for col in numerical_columns1:
    input[col] = scaler.fit_transform(np.array(input[col]).reshape(-1, 1))

# ทำนาย
prediction2 = log_regtest.predict(input)

# แสดงผลลัพธ์
for index, row in input.iterrows():
    prediction2 = log_regtest.predict([row])
    if prediction2[0] == 1:
        print("คนที่", index+1, ": เป็นโรคสมองเสื่อม")
    else:
        print("คนที่", index+1, ": ไม่เป็นโรคสมองเสื่อม")

"""เฉลย 0 1 0 1 1 1 1 0 0 1   (0=ไม่เป็น,1=เป็น)

"""